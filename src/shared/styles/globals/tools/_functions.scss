@use 'sass:math';
@use 'sass:list';
@use 'sass:map';
@use '../settings' as s;

@function get-color-var($name) {
  @if list.index(s.$theme-color-names, $name) == null {
    @error "Color variable '#{$name}' does not exist in the theme colors. Available colors: #{s.$theme-color-names}";
  }
  @return --#{s.$color-var-prefix}#{$name};
}

@function get-z-var($name) {
  @if not map.has-key(s.$z-indexes, $name) {
    @error "z-index variable '#{$name}' does not exist. Available z-indexes: #{s.$z-indexes}";
  }
  @return --#{s.$z-index-var-prefix}#{$name};
}

///
/// Returns a number without unit.
///
/// @param {Number} $value
///
/// @returns {Number} - 30px -> 30
///
@function strip-unit($value) {
  @return math.div($value, ($value * 0 + 1));
}

@function px-to-rem($px-value) {
  @if math.is-unitless($px-value) {
    @return math.div($px-value, s.$base-font-size) * 1rem;
  }

  $units: math.unit($px-value);

  @if $units == 'rem' {
    @return $px-value;
  }

  @if $units != 'px' {
    @error 'px-to-rem() expects a value in pixels (px). Received: #{$units}';
  }

  @return math.div(strip-unit($px-value), 16) * 1rem;
}

///
/// Returns dynamic line-height based on font-size.
///
@function lh-ratio($px-font-size) {
  @return harmonic-line-height($px-font-size);
}

// Uses natural logarithm to create smooth scaling curves
@function logarithmic-line-height(
  $font-size,
  $min-ratio: 1.2,
  $max-ratio: 1.8
) {
  $size: if(math.is-unitless($font-size), $font-size, $font-size / 1px);

  // Natural log creates smooth curve from max-ratio (small text) to min-ratio (large text)
  $log-factor: math.div(
    math.log($size + 1),
    math.log(72 + 1)
  ); // 72px as reference large size
  $ratio: $max-ratio - (($max-ratio - $min-ratio) * $log-factor);

  @return math.max($min-ratio, $ratio);
}

$perfect-fourth: 1.333;

// Based on musical harmony ratios for typographic rhythm
@function harmonic-line-height(
  $px-font-size,
  $px-base-size: s.$base-font-size,
  $base-line-height: s.$base-line-height-ratio,
  $scale-ratio: $perfect-fourth
) {
  $size-ratio: math.div($px-font-size, $px-base-size);
  // Find position in modular scale
  $scale-position: math.div(math.log($size-ratio), math.log($scale-ratio));
  // Apply inverse harmonic progression for line-height
  $harmonic-factor: math.div(1, (1 + ($scale-position * 0.15)));

  @return $base-line-height * $harmonic-factor;
}
